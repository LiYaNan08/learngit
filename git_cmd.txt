初始化git仓库： git init 
将修改的文件添加到暂存区：git add file
用暂存区的文件覆盖工作区：git checkout -- file
将暂存区的文件提交到仓库：git commit -m ""
用仓库的文件覆盖暂存区：git reset HEAD file
git diff:如果暂存区有文件，则比较暂存区和工作区，否则比较仓库和工作区。
git diff --cached:比较暂存区和仓库。
git diff HEAD: 比较工作区和仓库
git status:查看git diff pv8

git log:查看日志
git reflog:查看操作日志。
回滚：
git reset --hard HEAD^  回滚到上一个版本
git reset --hard HEAD^^ 回滚到上上一个版本
git reset --hard 版本id 回滚到指定版本

git checkout -- file
1、如果没有添加到暂存区：则用版本库还原工作区。
2、如果已添加到暂存区且工作区做出了修改，则用暂存区还原工作区。
3、如果已添加到暂存区，但是没作出修改，想退回到上一个版本，怎么搞？
针对第三种情况，此时可以使用命令git reset HEAD file取消提交到暂存区的操作，然后就回到了情况1.

将本地关联到github仓库：
git remote add orign git@github.com:LiYaNan0812/learngit.git
git branch -M main   修改本地仓库分支名为main
git push orign -u main  将本地仓库推送到远程仓库。后续推送省略参数-u

创建并切换分支
git checkout -b dev
等于
git branch dev  创建dev分支
git checkout dev 切换到dev分支

合并指定分支到当前分支
切换分支到main分支 git checkout main
合并：git merge dev

删除分支：（当分支上的工作完成后，可以删除分支）
git branch -d dev

创建并切换分支的另一种方式
git switch -c dev

切换分支： git switch main
分支管理:

Bug分支：
git stash  保存现场。
git stash list 查看存档。
git stash apply 恢复存档
git stash drop 删除存档
git stash pop 恢复并删除存档。
git cherry-pick <commit> 将指定提交的修改复制到当前分支，避免重复劳动。

假装修复了一个bug.

测试--no-ff是否记录日志
这个是使用no-ff
git merge --no-ff -m "merge with --no-ff" dev


指定本地dev分支与远程origin/dev分支的链接
git branch --set-upstream-to=origin/dev dev.
多人协作的工作模式：
1,使用git push origin <branch-name>推送修改。
2,如果推送失败，则远程分支比本地分支新，需要先git pull试图合并。
3，如果合并有冲突，需要解决，并在本地提交。
4，没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送


git rebase理解
git rebase可以将两个分支的提交合并到一条时间线上。

git tag标签
标签是对某一次提交的打一个标识。
git tag  v0.1  给当前提交打一个标识。
git tag v0.2 <commitid>  给指定提交打一个标识。
git tag -a  标签  -m "" <commitid>
git tag  查看所有标签。
git show v0.1 查看标签的具体信息。

git push origin <tagname> 向远程推送一个标签
git push origin --tags  向远程推送所有未推送的标签
git tag -d <tagname> 删除一个本地标签
git push origin :refs/tags/<tagname> 删除一个远程标签

